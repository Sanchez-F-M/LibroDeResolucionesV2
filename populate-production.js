/**
 * Script para poblar la base de datos en producci√≥n via endpoint
 * Se ejecutar√° mediante llamadas HTTP al backend en Render
 */

const BACKEND_URL = 'https://libro-resoluciones-api.onrender.com';

const testResolutions = [
  {
    NumdeResolucion: 2025001,
    Asunto: 'Designaci√≥n de Personal de Seguridad',
    Referencia: 'Expediente N¬∞ 12345/2025 - Ministerio de Seguridad',
    FechaCreacion: '2025-01-15'
  },
  {
    NumdeResolucion: 2025002,
    Asunto: 'Modificaci√≥n de Horarios de Guardia',
    Referencia: 'Nota Interna N¬∞ 456/2025 - Departamento de Personal',
    FechaCreacion: '2025-01-16'
  },
  {
    NumdeResolucion: 2025003,
    Asunto: 'Adquisici√≥n de Equipamiento Policial',
    Referencia: 'Licitaci√≥n P√∫blica N¬∞ 001/2025 - Suministros',
    FechaCreacion: '2025-01-17'
  },
  {
    NumdeResolucion: 2025004,
    Asunto: 'Protocolo de Seguridad COVID-19',
    Referencia: 'Circular N¬∞ 789/2025 - √Årea de Salud Ocupacional',
    FechaCreacion: '2025-01-18'
  },
  {
    NumdeResolucion: 2025005,
    Asunto: 'Creaci√≥n de Nueva Comisar√≠a',
    Referencia: 'Decreto Provincial N¬∞ 123/2025 - Gobernaci√≥n',
    FechaCreacion: '2025-01-19'
  }
];

async function loginAndGetToken() {
  console.log('üîê Obteniendo token de autenticaci√≥n...');
  
  const response = await fetch(`${BACKEND_URL}/api/user/login`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      Nombre: 'admin',
      Contrasena: 'admin123'
    })
  });
  
  const data = await response.json();
  
  if (response.ok && data.token) {
    console.log('‚úÖ Token obtenido exitosamente');
    return data.token;
  } else {
    throw new Error(`Error en login: ${data.error || 'Sin token'}`);
  }
}

async function createResolution(resolution, token) {
  console.log(`üìù Creando resoluci√≥n ${resolution.NumdeResolucion}...`);
  
  const formData = new FormData();
  formData.append('NumdeResolucion', resolution.NumdeResolucion);
  formData.append('Asunto', resolution.Asunto);
  formData.append('Referencia', resolution.Referencia);
  formData.append('FechaCreacion', resolution.FechaCreacion);
  
  const response = await fetch(`${BACKEND_URL}/api/books`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${token}`
    },
    body: formData
  });
  
  const data = await response.json();
  
  if (response.ok) {
    console.log(`‚úÖ Resoluci√≥n ${resolution.NumdeResolucion} creada exitosamente`);
    return true;
  } else {
    console.log(`‚ö†Ô∏è Error al crear resoluci√≥n ${resolution.NumdeResolucion}: ${data.error}`);
    return false;
  }
}

async function populateProductionDatabase() {
  try {
    console.log('üöÄ Iniciando poblaci√≥n de base de datos en producci√≥n...');
    console.log(`üåê Backend URL: ${BACKEND_URL}`);
    
    // Obtener token de autenticaci√≥n
    const token = await loginAndGetToken();
    
    // Crear cada resoluci√≥n
    let created = 0;
    let failed = 0;
    
    for (const resolution of testResolutions) {
      try {
        const success = await createResolution(resolution, token);
        if (success) {
          created++;
        } else {
          failed++;
        }
        
        // Pausa entre requests para no sobrecargar
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.error(`‚ùå Error al crear resoluci√≥n ${resolution.NumdeResolucion}:`, error.message);
        failed++;
      }
    }
    
    console.log('\nüìä RESUMEN DE POBLACI√ìN:');
    console.log(`‚úÖ Resoluciones creadas: ${created}`);
    console.log(`‚ùå Resoluciones fallidas: ${failed}`);
    console.log(`üìã Total procesadas: ${created + failed}`);
    
    // Verificar resultado final
    console.log('\nüîç Verificando base de datos...');
    const verifyResponse = await fetch(`${BACKEND_URL}/api/books/all`);
    const allResolutions = await verifyResponse.json();
    
    if (Array.isArray(allResolutions) && allResolutions.length > 0) {
      console.log(`üéâ ¬°√âxito! Base de datos tiene ${allResolutions.length} resoluciones`);
      console.log('\nüìã Resoluciones disponibles:');
      allResolutions.forEach(r => {
        console.log(`   - ${r.NumdeResolucion}: ${r.asunto || r.Asunto}`);
      });
    } else {
      console.log('‚ö†Ô∏è La base de datos sigue vac√≠a o hay un problema');
    }
    
  } catch (error) {
    console.error('üí• Error fatal:', error);
  }
}

// Ejecutar si es llamado directamente
if (typeof window !== 'undefined') {
  // Ejecutar en navegador
  populateProductionDatabase();
} else {
  // Ejecutar en Node.js (si se llama desde l√≠nea de comandos)
  populateProductionDatabase();
}
