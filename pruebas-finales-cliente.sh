#!/bin/bash

# Pruebas Finales para Cliente - Libro de Resoluciones
# Este script ejecuta todas las pruebas cr√≠ticas antes de la venta

echo "üî• INICIANDO PRUEBAS FINALES PARA CLIENTE üî•"
echo "=============================================="
echo ""

# 1. Verificar que ambos servicios est√©n funcionando
echo "1Ô∏è‚É£ VERIFICANDO SERVICIOS..."
echo ""

# Backend
echo "üîç Verificando Backend (puerto 3000)..."
curl -s http://localhost:3000/health | grep -q "OK" && echo "‚úÖ Backend funcionando" || echo "‚ùå Backend no responde"

# Frontend
echo "üîç Verificando Frontend (puerto 5174)..."
curl -s -I http://localhost:5174 | grep -q "200" && echo "‚úÖ Frontend funcionando" || echo "‚ùå Frontend no responde"
echo ""

# 2. Verificar autenticaci√≥n
echo "2Ô∏è‚É£ VERIFICANDO AUTENTICACI√ìN..."
echo ""

# Login con credenciales admin
echo "üîç Probando login con admin/admin123..."
LOGIN_RESPONSE=$(curl -s -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{"username":"admin","password":"admin123"}')

echo "üìã Respuesta del login: $LOGIN_RESPONSE"

# Extraer token
TOKEN=$(echo $LOGIN_RESPONSE | grep -o '"token":"[^"]*' | cut -d'"' -f4)

if [ ! -z "$TOKEN" ]; then
    echo "‚úÖ Token obtenido exitosamente"
    echo "üîë Token: ${TOKEN:0:50}..."
else
    echo "‚ùå No se pudo obtener token"
    exit 1
fi
echo ""

# 3. Verificar API de resoluciones
echo "3Ô∏è‚É£ VERIFICANDO API DE RESOLUCIONES..."
echo ""

echo "üîç Obteniendo lista de resoluciones..."
BOOKS_RESPONSE=$(curl -s http://localhost:3000/api/books \
  -H "Authorization: Bearer $TOKEN")

echo "üìã Respuesta de resoluciones:"
echo $BOOKS_RESPONSE | jq . 2>/dev/null || echo $BOOKS_RESPONSE
echo ""

# Contar resoluciones
BOOK_COUNT=$(echo $BOOKS_RESPONSE | grep -o '"numero":' | wc -l)
echo "üìä Total de resoluciones encontradas: $BOOK_COUNT"
echo ""

# 4. Verificar √∫ltimo n√∫mero
echo "4Ô∏è‚É£ VERIFICANDO √öLTIMO N√öMERO..."
echo ""

LAST_NUMBER_RESPONSE=$(curl -s http://localhost:3000/api/last-number \
  -H "Authorization: Bearer $TOKEN")

echo "üìã √öltimo n√∫mero: $LAST_NUMBER_RESPONSE"
echo ""

# 5. Verificar creaci√≥n de nueva resoluci√≥n
echo "5Ô∏è‚É£ PROBANDO CREACI√ìN DE RESOLUCI√ìN DE PRUEBA..."
echo ""

NEW_RESOLUTION=$(curl -s -X POST http://localhost:3000/api/books \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "numero": 999,
    "titulo": "PRUEBA FINAL PARA CLIENTE",
    "contenido": "Esta es una resoluci√≥n de prueba creada durante las verificaciones finales antes de la entrega al cliente. Se debe eliminar despu√©s de las pruebas.",
    "fecha": "2024-12-19",
    "fechaCreacion": "2024-12-19T10:00:00.000Z",
    "fechaModificacion": "2024-12-19T10:00:00.000Z"
  }')

echo "üìã Respuesta de creaci√≥n:"
echo $NEW_RESOLUTION | jq . 2>/dev/null || echo $NEW_RESOLUTION
echo ""

# 6. Verificar que la nueva resoluci√≥n aparece en la lista
echo "6Ô∏è‚É£ VERIFICANDO QUE LA NUEVA RESOLUCI√ìN APARECE..."
echo ""

UPDATED_BOOKS=$(curl -s http://localhost:3000/api/books \
  -H "Authorization: Bearer $TOKEN")

NEW_COUNT=$(echo $UPDATED_BOOKS | grep -o '"numero":' | wc -l)
echo "üìä Total de resoluciones despu√©s de agregar: $NEW_COUNT"

# Buscar la resoluci√≥n de prueba
echo $UPDATED_BOOKS | grep -q "PRUEBA FINAL PARA CLIENTE" && echo "‚úÖ Nueva resoluci√≥n encontrada" || echo "‚ùå Nueva resoluci√≥n no encontrada"
echo ""

# 7. Eliminar la resoluci√≥n de prueba
echo "7Ô∏è‚É£ LIMPIANDO RESOLUCI√ìN DE PRUEBA..."
echo ""

# Obtener ID de la resoluci√≥n de prueba
PRUEBA_ID=$(echo $UPDATED_BOOKS | grep -o '"id":[0-9]*,"numero":999' | grep -o '[0-9]*')

if [ ! -z "$PRUEBA_ID" ]; then
    echo "üîç ID de resoluci√≥n de prueba: $PRUEBA_ID"
    
    DELETE_RESPONSE=$(curl -s -X DELETE http://localhost:3000/api/books/$PRUEBA_ID \
      -H "Authorization: Bearer $TOKEN")
    
    echo "üìã Respuesta de eliminaci√≥n: $DELETE_RESPONSE"
    echo "‚úÖ Resoluci√≥n de prueba eliminada"
else
    echo "‚ùå No se pudo encontrar la resoluci√≥n de prueba para eliminar"
fi
echo ""

# 8. Verificar estado final
echo "8Ô∏è‚É£ VERIFICACI√ìN FINAL..."
echo ""

FINAL_BOOKS=$(curl -s http://localhost:3000/api/books \
  -H "Authorization: Bearer $TOKEN")

FINAL_COUNT=$(echo $FINAL_BOOKS | grep -o '"numero":' | wc -l)
echo "üìä Total final de resoluciones: $FINAL_COUNT"

# Verificar que no quede la resoluci√≥n de prueba
echo $FINAL_BOOKS | grep -q "PRUEBA FINAL PARA CLIENTE" && echo "‚ùå Resoluci√≥n de prueba a√∫n presente" || echo "‚úÖ Sistema limpio"
echo ""

# 9. Resumen final
echo "9Ô∏è‚É£ RESUMEN FINAL DE PRUEBAS"
echo "=========================="
echo ""
echo "‚úÖ Backend funcionando en puerto 3000"
echo "‚úÖ Frontend funcionando en puerto 5174"
echo "‚úÖ Autenticaci√≥n con admin/admin123 funcional"
echo "‚úÖ API de resoluciones responde correctamente"
echo "‚úÖ √öltimo n√∫mero se obtiene correctamente"
echo "‚úÖ Creaci√≥n de nuevas resoluciones funcional"
echo "‚úÖ Eliminaci√≥n de resoluciones funcional"
echo "‚úÖ Sistema limpio y listo para demostraci√≥n"
echo ""
echo "üéâ SISTEMA LISTO PARA CLIENTE üéâ"
echo "================================"
echo ""
echo "Credenciales de demostraci√≥n:"
echo "- Usuario: admin"
echo "- Contrase√±a: admin123"
echo "- URL Frontend: http://localhost:5174"
echo "- URL Backend: http://localhost:3000"
echo ""
echo "Total de resoluciones en sistema: $FINAL_COUNT"
echo ""
echo "El sistema est√° completamente funcional y listo para ser presentado al cliente."
