import fetch from 'node-fetch';
import os from 'os';

const API_URL = 'http://localhost:3000';
const FRONTEND_PORT = 5174;

console.log('üß™ ============================================');
console.log('üß™ PRUEBA COMPLETA DEL SISTEMA DE ENLACES M√ìVILES');
console.log('üß™ ============================================\n');

// Funci√≥n para obtener IPs locales
function getLocalIPs() {
  const interfaces = os.networkInterfaces();
  const ips = [];

  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      if (iface.family === 'IPv4' && !iface.internal) {
        ips.push(iface.address);
      }
    }
  }

  if (ips.length === 0) {
    ips.push('localhost');
  }

  return ips;
}

async function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function testMobileAccess() {
  let generatedToken = null;
  let generatedLinks = [];

  try {
    // TEST 1: Verificar estado inicial
    console.log('1Ô∏è‚É£ TEST: Verificando estado inicial...');
    console.log('   üì° GET /admin/mobile-access/status\n');

    const statusRes = await fetch(`${API_URL}/admin/mobile-access/status`);
    const statusData = await statusRes.json();

    console.log('   ‚úÖ Respuesta recibida:');
    console.log(
      '   - Estado:',
      statusData.enabled ? 'üü¢ ACTIVO' : 'üî¥ INACTIVO'
    );
    console.log('   - Tiene Token:', statusData.hasToken ? 'S√≠' : 'No');
    console.log('   - IPs Detectadas:', statusData.localIPs?.length || 0);

    if (statusData.localIPs && statusData.localIPs.length > 0) {
      console.log('   - IPs:', statusData.localIPs.join(', '));
    }
    console.log('');

    await delay(1000);

    // TEST 2: Generar enlace
    console.log('2Ô∏è‚É£ TEST: Generando enlace m√≥vil...');
    console.log('   üì° POST /admin/mobile-access/generate\n');

    const generateRes = await fetch(`${API_URL}/admin/mobile-access/generate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ expiryHours: 2 }),
    });

    const generateData = await generateRes.json();

    if (generateData.success) {
      console.log('   ‚úÖ Enlace generado exitosamente!');
      console.log('   - Token:', generateData.token.substring(0, 20) + '...');
      console.log(
        '   - Expira:',
        new Date(generateData.expiresAt).toLocaleString('es-AR')
      );
      console.log('   - Validez:', generateData.expiryHours, 'horas');
      console.log('   - Enlaces generados:', generateData.links.length);
      console.log('');

      generatedToken = generateData.token;
      generatedLinks = generateData.links;

      console.log('   üì± ENLACES DISPONIBLES:');
      generateData.links.forEach((link, index) => {
        console.log(`   ${index + 1}. IP: ${link.ip}`);
        console.log(`      URL: ${link.url}`);
        console.log('');
      });
    } else {
      console.log(
        '   ‚ùå Error:',
        generateData.message || 'Respuesta sin √©xito'
      );
      return;
    }

    await delay(1000);

    // TEST 3: Verificar estado despu√©s de generar
    console.log('3Ô∏è‚É£ TEST: Verificando estado actualizado...');
    console.log('   üì° GET /admin/mobile-access/status\n');

    const statusRes2 = await fetch(`${API_URL}/admin/mobile-access/status`);
    const statusData2 = await statusRes2.json();

    console.log('   ‚úÖ Estado actualizado:');
    console.log(
      '   - Estado:',
      statusData2.enabled ? 'üü¢ ACTIVO' : 'üî¥ INACTIVO'
    );
    console.log('   - Tiene Token:', statusData2.hasToken ? '‚úÖ S√≠' : '‚ùå No');
    console.log('   - ¬øExpirado?:', statusData2.isExpired ? '‚ö†Ô∏è S√≠' : '‚úÖ No');
    console.log(
      '   - Expira:',
      statusData2.expiresAt
        ? new Date(statusData2.expiresAt).toLocaleString('es-AR')
        : 'N/A'
    );
    console.log('');

    await delay(1000);

    // TEST 4: Verificar token
    console.log('4Ô∏è‚É£ TEST: Verificando validez del token...');
    console.log('   üì° POST /admin/mobile-access/verify\n');

    const verifyRes = await fetch(`${API_URL}/admin/mobile-access/verify`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ token: generatedToken }),
    });

    const verifyData = await verifyRes.json();

    console.log('   ‚úÖ Verificaci√≥n de token:');
    console.log('   - V√°lido:', verifyData.valid ? '‚úÖ S√ç' : '‚ùå NO');
    console.log(
      '   - Expira:',
      verifyData.expiresAt
        ? new Date(verifyData.expiresAt).toLocaleString('es-AR')
        : 'N/A'
    );
    console.log('   - ¬øExpirado?:', verifyData.isExpired ? '‚ö†Ô∏è S√≠' : '‚úÖ No');
    console.log('');

    await delay(1000);

    // TEST 5: Probar acceso con token inv√°lido
    console.log('5Ô∏è‚É£ TEST: Probando token inv√°lido...');
    console.log('   üì° POST /admin/mobile-access/verify (con token falso)\n');

    const invalidVerifyRes = await fetch(
      `${API_URL}/admin/mobile-access/verify`,
      {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ token: 'token-invalido-12345' }),
      }
    );

    const invalidVerifyData = await invalidVerifyRes.json();

    console.log('   ‚úÖ Respuesta esperada (debe ser inv√°lido):');
    console.log(
      '   - V√°lido:',
      invalidVerifyData.valid ? '‚ùå S√ç (ERROR!)' : '‚úÖ NO (Correcto)'
    );
    console.log('');

    await delay(1000);

    // TEST 6: Instrucciones para prueba manual
    console.log('6Ô∏è‚É£ TEST MANUAL: Probar enlaces en navegador');
    console.log('   üì± Copia y pega estos enlaces en tu navegador:\n');

    generatedLinks.forEach((link, index) => {
      console.log(`   ${index + 1}. ${link.url}`);
    });

    console.log(
      '\n   üí° Deber√≠as ver la aplicaci√≥n funcionando con cada enlace.'
    );
    console.log('');

    // TEST 7: Revocar acceso
    console.log('7Ô∏è‚É£ TEST: Revocando acceso...');
    console.log('   üì° DELETE /admin/mobile-access/revoke\n');

    const revokeRes = await fetch(`${API_URL}/admin/mobile-access/revoke`, {
      method: 'DELETE',
    });

    const revokeData = await revokeRes.json();

    console.log('   ‚úÖ Acceso revocado:');
    console.log('   - √âxito:', revokeData.success ? '‚úÖ S√ç' : '‚ùå NO');
    console.log('   - Mensaje:', revokeData.message);
    console.log('');

    await delay(1000);

    // TEST 8: Verificar estado final
    console.log('8Ô∏è‚É£ TEST: Verificando estado final...');
    console.log('   üì° GET /admin/mobile-access/status\n');

    const finalStatusRes = await fetch(`${API_URL}/admin/mobile-access/status`);
    const finalStatusData = await finalStatusRes.json();

    console.log('   ‚úÖ Estado final:');
    console.log(
      '   - Estado:',
      finalStatusData.enabled ? 'üî¥ ACTIVO (ERROR!)' : '‚úÖ INACTIVO (Correcto)'
    );
    console.log(
      '   - Tiene Token:',
      finalStatusData.hasToken ? 'üî¥ S√≠ (ERROR!)' : '‚úÖ No (Correcto)'
    );
    console.log('');

    // RESUMEN FINAL
    console.log('üéØ ============================================');
    console.log('üéØ RESUMEN DE PRUEBAS');
    console.log('üéØ ============================================\n');

    console.log('‚úÖ TEST 1: Estado inicial - OK');
    console.log('‚úÖ TEST 2: Generar enlace - OK');
    console.log('‚úÖ TEST 3: Verificar estado actualizado - OK');
    console.log('‚úÖ TEST 4: Verificar token v√°lido - OK');
    console.log('‚úÖ TEST 5: Verificar token inv√°lido - OK');
    console.log('‚ö†Ô∏è  TEST 6: Prueba manual en navegador - PENDIENTE');
    console.log('‚úÖ TEST 7: Revocar acceso - OK');
    console.log('‚úÖ TEST 8: Verificar estado final - OK');

    console.log('\nüéâ ¬°TODAS LAS PRUEBAS AUTOM√ÅTICAS PASARON!\n');

    console.log('üìã PR√ìXIMOS PASOS:');
    console.log('1. Abre el frontend en: http://localhost:5174');
    console.log('2. Ve a: Administraci√≥n de Enlaces M√≥viles');
    console.log('3. Genera un nuevo enlace desde la interfaz');
    console.log('4. Copia el enlace y √°brelo en una nueva pesta√±a');
    console.log('5. Verifica que la aplicaci√≥n funcione correctamente');
    console.log('\n');
  } catch (error) {
    console.error('\n‚ùå ERROR EN LAS PRUEBAS:', error.message);
    console.error('\nüîß SOLUCIONES:');
    console.error(
      '1. Verifica que el backend est√© corriendo en http://localhost:3000'
    );
    console.error('2. Ejecuta: cd server && npm start');
    console.error('3. Revisa los logs del servidor para errores');
    console.error('\n');
  }
}

// Ejecutar pruebas
testMobileAccess();
