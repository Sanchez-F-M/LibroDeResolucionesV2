#!/bin/bash

echo "üîç VERIFICADOR DE CLOUDINARY - LIBRO DE RESOLUCIONES"
echo "===================================================="
echo ""

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para mostrar resultados
show_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

echo "üì° 1. VERIFICANDO ESTADO DEL BACKEND..."
echo "======================================"

# Verificar que el backend est√© funcionando
backend_response=$(curl -s https://libroderesoluciones-api.onrender.com/health)
if echo "$backend_response" | grep -q "healthy"; then
    show_result 0 "Backend funcionando correctamente"
    
    # Extraer informaci√≥n del backend
    uptime=$(echo "$backend_response" | grep -o '"uptime":[0-9.]*' | cut -d':' -f2)
    echo -e "${BLUE}‚ÑπÔ∏è  Uptime: ${uptime} segundos${NC}"
else
    show_result 1 "Backend no responde correctamente"
    echo "Respuesta: $backend_response"
    exit 1
fi

echo ""
echo "‚òÅÔ∏è 2. VERIFICANDO CONFIGURACI√ìN DE CLOUDINARY..."
echo "=============================================="

# Verificar configuraci√≥n de Cloudinary
cloudinary_response=$(curl -s https://libroderesoluciones-api.onrender.com/api/cloudinary/status)

if echo "$cloudinary_response" | grep -q '"connected":true'; then
    show_result 0 "Cloudinary CONECTADO"
    
    # Extraer informaci√≥n de Cloudinary
    cloud_name=$(echo "$cloudinary_response" | grep -o '"cloud_name":"[^"]*' | cut -d'"' -f4)
    storage_mode=$(echo "$cloudinary_response" | grep -o '"storage_mode":"[^"]*' | cut -d'"' -f4)
    
    echo -e "${GREEN}üìÅ Cloud Name: $cloud_name${NC}"
    echo -e "${GREEN}üíæ Storage Mode: $storage_mode${NC}"
    echo -e "${GREEN}üìÇ Folder: libro-resoluciones${NC}"
    
elif echo "$cloudinary_response" | grep -q '"connected":false'; then
    show_result 1 "Cloudinary NO CONECTADO"
    
    # Mostrar detalles del error
    error=$(echo "$cloudinary_response" | grep -o '"error":"[^"]*' | cut -d'"' -f4)
    storage_mode=$(echo "$cloudinary_response" | grep -o '"storage_mode":"[^"]*' | cut -d'"' -f4)
    
    echo -e "${RED}‚ùå Error: $error${NC}"
    echo -e "${YELLOW}üíæ Modo alternativo: $storage_mode${NC}"
    
    # Verificar variables de entorno
    echo ""
    echo -e "${YELLOW}üîß VARIABLES DE ENTORNO:${NC}"
    
    if echo "$cloudinary_response" | grep -q '"cloud_name":true'; then
        echo -e "${GREEN}  ‚úÖ CLOUDINARY_CLOUD_NAME configurada${NC}"
    else
        echo -e "${RED}  ‚ùå CLOUDINARY_CLOUD_NAME falta${NC}"
    fi
    
    if echo "$cloudinary_response" | grep -q '"api_key":true'; then
        echo -e "${GREEN}  ‚úÖ CLOUDINARY_API_KEY configurada${NC}"
    else
        echo -e "${RED}  ‚ùå CLOUDINARY_API_KEY falta${NC}"
    fi
    
    if echo "$cloudinary_response" | grep -q '"api_secret":true'; then
        echo -e "${GREEN}  ‚úÖ CLOUDINARY_API_SECRET configurada${NC}"
    else
        echo -e "${RED}  ‚ùå CLOUDINARY_API_SECRET falta${NC}"
    fi
    
else
    show_result 1 "Error al verificar Cloudinary"
    echo "Respuesta inesperada: $cloudinary_response"
fi

echo ""
echo "üß™ 3. PROBANDO UPLOAD A CLOUDINARY..."
echo "===================================="

if echo "$cloudinary_response" | grep -q '"connected":true'; then
    # Probar upload solo si Cloudinary est√° conectado
    upload_response=$(curl -s -X POST https://libroderesoluciones-api.onrender.com/api/cloudinary/test-upload)
    
    if echo "$upload_response" | grep -q '"success":true'; then
        show_result 0 "Upload de prueba EXITOSO"
        
        # Extraer URL de la imagen subida
        url=$(echo "$upload_response" | grep -o '"url":"[^"]*' | cut -d'"' -f4)
        public_id=$(echo "$upload_response" | grep -o '"public_id":"[^"]*' | cut -d'"' -f4)
        
        echo -e "${GREEN}üîó URL: $url${NC}"
        echo -e "${GREEN}üÜî Public ID: $public_id${NC}"
    else
        show_result 1 "Upload de prueba FALL√ì"
        
        error=$(echo "$upload_response" | grep -o '"error":"[^"]*' | cut -d'"' -f4)
        echo -e "${RED}‚ùå Error: $error${NC}"
    fi
else
    echo -e "${YELLOW}‚è≠Ô∏è  Saltando test de upload (Cloudinary no conectado)${NC}"
fi

echo ""
echo "üìÇ 4. VERIFICANDO CARPETA DE IM√ÅGENES..."
echo "======================================="

if echo "$cloudinary_response" | grep -q '"connected":true'; then
    # Verificar contenido de la carpeta
    folder_response=$(curl -s https://libroderesoluciones-api.onrender.com/api/cloudinary/folder-info)
    
    if echo "$folder_response" | grep -q '"cloudinary_working":true'; then
        total=$(echo "$folder_response" | grep -o '"total_resources":[0-9]*' | cut -d':' -f2)
        found=$(echo "$folder_response" | grep -o '"resources_found":[0-9]*' | cut -d':' -f2)
        
        show_result 0 "Carpeta verificada"
        echo -e "${BLUE}üìä Total de recursos: $total${NC}"
        echo -e "${BLUE}üîç Recursos encontrados: $found${NC}"
        
        if [ "$found" -gt "0" ]; then
            echo -e "${GREEN}üì∏ Hay im√°genes almacenadas en Cloudinary${NC}"
        else
            echo -e "${YELLOW}üì≠ Carpeta vac√≠a (normal para instalaci√≥n nueva)${NC}"
        fi
    else
        show_result 1 "Error verificando carpeta"
    fi
else
    echo -e "${YELLOW}‚è≠Ô∏è  Saltando verificaci√≥n de carpeta (Cloudinary no conectado)${NC}"
fi

echo ""
echo "üìã RESUMEN FINAL"
echo "==============="

if echo "$cloudinary_response" | grep -q '"connected":true'; then
    echo -e "${GREEN}üéâ CLOUDINARY EST√Å FUNCIONANDO CORRECTAMENTE${NC}"
    echo ""
    echo -e "${GREEN}‚úÖ Estado: Conectado y operativo${NC}"
    echo -e "${GREEN}‚úÖ Uploads: Funcionando${NC}"
    echo -e "${GREEN}‚úÖ Storage: Usando Cloudinary en producci√≥n${NC}"
    echo ""
    echo -e "${BLUE}üîó Enlaces √∫tiles:${NC}"
    echo "   - Dashboard Cloudinary: https://cloudinary.com/console"
    echo "   - Media Library: https://cloudinary.com/console/media_library"
    echo "   - Carpeta del proyecto: libro-resoluciones/"
    
elif echo "$cloudinary_response" | grep -q '"storage_mode":"local"'; then
    echo -e "${YELLOW}‚ö†Ô∏è  USANDO ALMACENAMIENTO LOCAL${NC}"
    echo ""
    echo -e "${YELLOW}üìÅ La aplicaci√≥n est√° usando almacenamiento local como fallback${NC}"
    echo -e "${YELLOW}üîß Para activar Cloudinary, configura las variables de entorno:${NC}"
    echo "   - CLOUDINARY_CLOUD_NAME"
    echo "   - CLOUDINARY_API_KEY"
    echo "   - CLOUDINARY_API_SECRET"
    echo ""
    echo "üìç Configurar en: https://dashboard.render.com ‚Üí libroderesoluciones-api ‚Üí Environment"
    
else
    echo -e "${RED}‚ùå PROBLEMA CON CLOUDINARY${NC}"
    echo ""
    echo -e "${RED}üö® Hay un problema con la configuraci√≥n de Cloudinary${NC}"
    echo -e "${YELLOW}üîß Acciones recomendadas:${NC}"
    echo "   1. Verificar variables de entorno en Render"
    echo "   2. Comprobar credenciales en Cloudinary Dashboard"
    echo "   3. Verificar logs del servidor"
fi

echo ""
echo "üîó Enlaces importantes:"
echo "   - Backend: https://libroderesoluciones-api.onrender.com"
echo "   - Render Dashboard: https://dashboard.render.com"
echo "   - Cloudinary Console: https://cloudinary.com/console"
